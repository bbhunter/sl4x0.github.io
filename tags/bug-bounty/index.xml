<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bug-bounty on 0xSlaxo Blog</title>
    <link>https://sl4x0.github.io/tags/bug-bounty/</link>
    <description>Recent content in bug-bounty on 0xSlaxo Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 29 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://sl4x0.github.io/tags/bug-bounty/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SANS SEC 552 Cheatsheet (Bug Bounties and Responsiple Disclosure)</title>
      <link>https://sl4x0.github.io/bug-bounty/sec-552-cheatsheet/</link>
      <pubDate>Tue, 29 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://sl4x0.github.io/bug-bounty/sec-552-cheatsheet/</guid>
      <description>App Analysis, Logic, and SQL Attacks üí° Course is inspired from case studies found in various bug bounty programs related to web and mobile app attacks. It will help in catching and reporting tricky web and mobile app security bugs that are commonly reported in bug bounty programs.
The Hunter‚Äôs Challenge JOINING A PROGRAM
üí° Security researchers can choose from many bug bounty programs available, either from the vendor directly or through a bug bounty platform (HackerOne, Bugcrowd, Synack&amp;hellip;)</description>
    </item>
    
    <item>
      <title>Obfuscating Attacks with Encoding</title>
      <link>https://sl4x0.github.io/research/obfuscating-attacks-w-encoding/</link>
      <pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://sl4x0.github.io/research/obfuscating-attacks-w-encoding/</guid>
      <description>This is my Notes about Obfuscation from PortSwigger
Context-specific decoding Client and Server side use decoding to pass data to systems decoding depends on context which data appears a query param = server side decode text content eg. html = client side decode When constructed attack = be carefull where the payload is being injected [Server Side - Client Side] Decoding discrepancies Injections involving on injecting payloads use reconginzalble patterns html tags javascript functions sql statements Website implement defenses to suspicious patterns Input Filters need to decode inputs to know if it is safe or not Its vital that the decoded perform when checking iputs is the same performed by backend Any discrepancy can enable an attacker to sneak harmful payloads past the filter by applying different encodings that will automatically be removed later.</description>
    </item>
    
    <item>
      <title>GitHub Digging By @Alwali</title>
      <link>https://sl4x0.github.io/bug-bounty/github-digging/</link>
      <pubDate>Fri, 30 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://sl4x0.github.io/bug-bounty/github-digging/</guid>
      <description>üñ®Ô∏èEmployees of The Company
Google : site:github.com inurl:‚Äùorg=company‚Äù
GitHub : org:company
¬ÆÔ∏è Docker Registry Authentication Data
https://github.com/Plazmaz/leaky-repo/tree/master/.docker
org:company filename:.dockercfg
org:company docker AND auth AND email
user:name filename:.dockercfg
user:name docker AND auth AND email
&amp;quot;[company.com](http://company.com/)&amp;quot; docker AND auth AND email
üàÇÔ∏è Web Server Credentials
https://github.com/Plazmaz/leaky-repo/blob/master/.idea/WebServers.xml
org:company filename:webservers.xml
org:company fileTransfer AND pass
user:name filename:webservers.xml
user:name fileTransfer AND pass
&amp;quot;[company.com](http://company.com/)&amp;quot; fileTransfer AND pass
üîë Firefox Saved Password Collection
https://github.com/Plazmaz/leaky-repo/blob/master/.mozilla/firefox/logins.json
org:company filename:firefox/logins.json
org:company encryptedUsername encryptedPassword</description>
    </item>
    
    <item>
      <title>Web Application Hacker‚Äôs Methodology</title>
      <link>https://sl4x0.github.io/books/wahh-methdology/</link>
      <pubDate>Mon, 26 Sep 2022 23:48:05 +0000</pubDate>
      
      <guid>https://sl4x0.github.io/books/wahh-methdology/</guid>
      <description>Chapter 21: A Web Application Hacker‚Äôs Methodology by @sl4x0 ÿ®ÿ≥ŸÖ ÿßŸÑŸÑŸá ÿßŸÑÿ±ÿ≠ŸÖŸÜ ÿßŸÑÿ±ÿ≠ŸäŸÖInformation gathered in one stage may enable you to return to an earlier stage and formulate more focused attacks. For example, an access control bug that enables you to obtain a listing of all users may enable you to perform a more effective password-guessing attack against the authentication function. Discovering a key vulnerability in one area of the application may enable you to shortcut some of the work in other areas.</description>
    </item>
    
  </channel>
</rss>
